@charset "UTF-8";

////
/// @group Globals
////

/// Add clearfix hack to element with floating children nodes.
///
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
///
/// @example scss - Usage
///   .element {
///     @include clearfix();
///   }
/// @example css - CSS Output
///   .element:before,
///   .element:after {
///     content: " ";
///     display: table;
///   }
///   .element:after {
///     clear: both;
///   }

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
} // clearfix()

/// Add `@font-face` styles for local font.
///
/// @author Kris Olszewski
///
/// @param {String} $font-family - Font family name
/// @param {String} $file-path - Path to directory
/// @param {String} $file-name - File name w/out extension
/// @param {String} $weight (normal) - Weight
/// @param {String} $style (normal) - Style
///
/// @example scss - Usage
///   @include font-face("OpenSansRegular", "/fonts/opensans-regular", "opensans-regular");
///
/// @example css - CSS Output
///   @font-face {
///     font-family: "OpenSansRegular";
///     font-weight: normal;
///     font-style: normal;
///     src: url("/fonts/opensans-regular/opensans-regular.eot");
///     src: url("/fonts/opensans-regular/opensans-regular.eot?#iefix") format("embedded-opentype"),
///       url("/fonts/opensans-regular/opensans-regular.woff") format("woff"),
///       url("/fonts/opensans-regular/opensans-regular.ttf") format("truetype"),
///       url("/fonts/opensans-regular/opensans-regular.svg#OpenSansRegular") format("svg");
///   }

@mixin font-face($font-family, $file-path, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url("#{$file-path}/#{$file-name}.eot");
    src: url("#{$file-path}/#{$file-name}.eot?#iefix") format("embedded-opentype"),
      url("#{$file-path}/#{$file-name}.woff") format("woff"),
      url("#{$file-path}/#{$file-name}.ttf") format("truetype"),
      url("#{$file-path}/#{$file-name}.svg##{$font-family}") format("svg");
  }
} // font-face()

/// Wrap `@content` with horizontal media query.
///
/// @author Kris Olszewski
///
/// @param {String} $direction - `under`, `between`, `above`
/// @param {String} $breakpoint--start - Breakpoint alias
/// @param {String} $breakpoint--end (null) - Breakpoint alias
///
/// @example scss - Usage
///   .element {
///     @include mq(under, mobile) {
///       font-size: 20px;
///     };
///   }
///
///   .element {
///     @include mq(between, mobile, tablet) {
///       font-size: 20px;
///     };
///   }
///
///   .element {
///     @include mq(above, tablet) {
///       font-size: 20px;
///     };
///   }
///
/// @example css - CSS Output
///   @media screen and (max-width: 399px) {
///     .element {
///       font-size: 20px;
///     }
///   }
///
///   @media screen and (min-width: 400px), screen and (max-width: 799px) {
///     .element {
///       font-size: 20px;
///     }
///   }
///
///   @media screen and (min-width: 800px) {
///     .element {
///       font-size: 20px;
///     }
///   }

@mixin mq($direction, $breakpoint--start, $breakpoint--end: null) {
  @if $direction == under {
    @media
      screen and (max-width: (map-get($breakpoints--horiztonal, $breakpoint--start) - 1)) {
      @content;
    }
  } @else if $direction == between {
    @media
      screen and (min-width: map-get($breakpoints--horiztonal, $breakpoint--start)),
      screen and (max-width: (map-get($breakpoints--horiztonal, $breakpoint--end) - 1)) {
      @content;
    }
  } @else if $direction == above {
    @media
      screen and (min-width: map-get($breakpoints--horiztonal, $breakpoint--start)) {
      @content;
    }
  }  // if/else $direction
} // mq()

/// Wrap `@content` with vertical media query.
///
/// @author Kris Olszewski
///
/// @param {String} $direction - `under` `between` `above`
/// @param {String} $breakpoint--start - Breakpoint alias
/// @param {String} $breakpoint--end (null) - Breakpoint alias
///
/// @example scss - Usage
///   .element {
///     @include mq(under, landscape) {
///       font-size: 20px;
///     };
///   }
///
///   .element {
///     @include mq(between, landscape, portrait) {
///       font-size: 20px;
///     };
///   }
///
///   .element {
///     @include mq(above, portrait) {
///       font-size: 20px;
///     };
///   }
///
/// @example css - CSS Output
///   @media screen and (max-height: 499px) {
///     .element {
///       font-size: 20px;
///     }
///   }
///
///   @media screen and (min-height: 500px), screen and (max-height: 699px) {
///     .element {
///       font-size: 20px;
///     }
///   }
///
///   @media screen and (min-height: 700px) {
///     .element {
///       font-size: 20px;
///     }
///   }

@mixin mq-v($direction, $breakpoint--start, $breakpoint--end: null) {
  @if $direction == under {
    @media
      screen and (max-height: (map-get($breakpoints--vertical, $breakpoint--start) - 1)) {
      @content;
    }
  } @else if $direction == between {
    @media
      screen and (min-height: map-get($breakpoints--vertical, $breakpoint--start)),
      screen and (max-height: (map-get($breakpoints--vertical, $breakpoint--end) - 1)) {
      @content;
    }
  } @else if $direction == above {
    @media
      screen and (min-height: map-get($breakpoints--vertical, $breakpoint--start)) {
      @content;
    }
  } // if/else $direction
} // mq-v()

/// Wrap `@content` with media query for high-density displays.
///
/// @author Kris Olszewski
///
/// @param {String} $breakpoint - Breakpoint alias
///
/// @example scss - Usage
///   .element {
///     background-image: url("/images/icon.png");
///     @mixin mq-hidpi() {
///       background-image: url("/images/icon@2x.png");
///       background-size: 32px 32px;
///     };
///   }
///
/// @example css - CSS Output
///   .element {
///     background-image: url("/images/icon.png");
///   }
///   @media screen and (-webkit-min-device-pixel-ratio: 2), screen and (min-resolution: 192dpi) {
///     .element {
///       background-image: url("/images/icon@2x.png");
///       background-size: 32px 32px;
///     }
///   }

@mixin mq-hidpi() {
  @media
    screen and (-webkit-min-device-pixel-ratio: 2),
    screen and (min-resolution: 192dpi) {
    @content;
  }
} // mq-hidpi()
